<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[markdown基本语法总结]]></title>
      <url>https://extratztty.github.io/2017/04/04/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="标题设置"><a href="#标题设置" class="headerlink" title="标题设置"></a>标题设置</h1><p>在markdown当中设置标题，有两种方式：</p>
<ol>
<li><p>通过在文字下方添加“=”和“-“,他们分别表示一级标题和二级标题。</p>
</li>
<li><p>在文字开头加上“#”，通过“#”数量表示几级标题。（一共6级标题）</p>
</li>
</ol>
<h1 id="块注释"><a href="#块注释" class="headerlink" title="块注释"></a>块注释</h1><p>通过在文字开头添加“&gt;”表示块注释。</p>
<blockquote>
<p>当&gt;和文字之间添加五个blank时,注释块会变化。</p>
</blockquote>
<h1 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h1><p>将需要设置为<em>斜体</em>的文字两端使用一个“*”或“_”夹起来</p>
<h1 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h1><p>将需要设置为<strong>粗体</strong>的文字两端使用两个“**”或“_”夹起来</p>
<h1 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h1><ul>
<li><p>在文字开头添加（*，+，-）实现无序列表（注意添加空格）</p>
</li>
<li><p>建议: 一个文档只是用一种无序列表的表示方式。</p>
</li>
</ul>
<h1 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h1><ol>
<li>使用数字后面跟上句号（注意添加空格）</li>
</ol>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="内联方式"><a href="#内联方式" class="headerlink" title="内联方式"></a>内联方式</h2><p>Hi , welcome to [extratztty’s romain] (<a href="https://extratztty.github.io">https://extratztty.github.io</a>)</p>
<h2 id="引用方式"><a href="#引用方式" class="headerlink" title="引用方式"></a>引用方式</h2><p>I get 10 times more traffic from [Google][1] than from [Yahoo][2] or [MSN][3]. </p> 

<p><span>[1]: <a href="http://google.com/" target="_blank" rel="external">http://google.com/</a></span><br><span>[2]: <a href="http://search.yahoo.com/" target="_blank" rel="external">http://search.yahoo.com/</a></span><br><span>[3]: <a href="http://search.msn.com/" target="_blank" rel="external">http://search.msn.com/</a></span></p>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>图片的处理方式类似链接的处理方式</p>
<h2 id="内联方式-1"><a href="#内联方式-1" class="headerlink" title="内联方式"></a>内联方式</h2><p>![alt text] (/img/avatar.png “Title”)</p>
<h2 id="引用方式-1"><a href="#引用方式-1" class="headerlink" title="引用方式"></a>引用方式</h2><p>![alt text][id]</p>

<p><span>[id]: /img/avatar.png”Title”</span></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>实现方式有两种：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">简单文字出现一个代码框。使用`&lt;blockquote&gt;`。（`不是单引号而是左上角的ESC下面~中的`）</div><div class="line">大片文字需要实现代码框。使用Tab和四个空格。</div></pre></td></tr></table></figure>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><p>hello[^hello]</p>


<p><span>[^hello]: hi</span></p>
<h1 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h1><p>在空白行下方添加三条“-”横线。</p>
<hr>
<h1 id="postscript"><a href="#postscript" class="headerlink" title="postscript"></a>postscript</h1><p>在 HTML 区块标签间的 Markdown 格式语法将不会被处理</p>
<p>HTML 的区段（行内）标签可以在 Markdown 的段落、列表或是标题里随意使用。</p>
<p>依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。</p>
]]></content>
      
        
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一些关于深度优先搜索的总结]]></title>
      <url>https://extratztty.github.io/2017/04/03/%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8E%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>过几天就是蓝桥杯了，虽然lowbee一个，但毕竟交了钱的，有必要做些准备。                 </p>
<p>其实上个学期前都没怎么用递归，更不用说深搜，初次接触还是在寒假蓝桥杯培训的时候，但当时只留了个概念，到最近才开始正式的开始一些思考总结。</p>
<h1 id="关于深度优先搜索"><a href="#关于深度优先搜索" class="headerlink" title="关于深度优先搜索"></a>关于深度优先搜索</h1><p>深度优先搜索（Depth-First-Search）是搜索算法的一种。是沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所有边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。属于盲目搜索。</p>
<p>以上是搜狗百科的总结。</p>
<p>总的来说我认为这就是一种没什么想法的时候，不考虑各种复杂度时可以用，且应用范围还是挺广的一种算法（一般是用来解迷宫一类的图形题的吧）。</p>
<p>大部分我用循环解不出来的题，用深搜思路倒是很容易理顺，虽说经常出BUG，或是时间超限什么的。</p>
<p>最近找了几道题练习一下深搜，虽然都不是最优的解法，有的都AC 不了，但就对深搜的总结而言还是很有帮助的。</p>
<h2 id="1326-排列组合"><a href="#1326-排列组合" class="headerlink" title="1326:排列组合"></a><a href="http://oj.acmclub.cn/problem.php?id=1326" target="_blank" rel="external">1326:排列组合</a></h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>从1-n几个数字中选出m个数字组合，输出所有组合方式</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>输入n和 m，中间用空格隔开</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出所有组合方式，每行一个，每个数字用空格隔开</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;iostream&gt;//1326</span></div><div class="line">using namespace std;</div><div class="line">//全局变量</div><div class="line">int n,m,a[100];</div><div class="line">//以步数作为函数的参数，标记递归步数，且递归步数限定，易于预留出口</div><div class="line">void dfs(int step)&#123;</div><div class="line">	int i;</div><div class="line">	<span class="keyword">for</span>(i=a[step-1]+1;i&lt;=n;i++)&#123;</div><div class="line">		a[step]=i;</div><div class="line">//递归——记录下一步递归</div><div class="line">		dfs(step+1);</div><div class="line">//回溯——通过回溯保证同级的节点以相似的状态进行下一步递归</div><div class="line">		a[step]=0;</div><div class="line">	&#125;</div><div class="line">//出口——预留出口结束递归</div><div class="line">	<span class="keyword">if</span>(step==m+1)&#123;</div><div class="line">		<span class="keyword">for</span>(i=1;i&lt;=m-1;i++)&#123;</div><div class="line">			cout&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">		&#125;</div><div class="line">		cout&lt;&lt;a[m]&lt;&lt;endl;</div><div class="line">		<span class="built_in">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	//cin&gt;&gt;n&gt;&gt;m;</div><div class="line">//调用函数，step初始化</div><div class="line">	dfs(1);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h2 id="1353-素数环"><a href="#1353-素数环" class="headerlink" title="1353:素数环"></a><a href="http://oj.acmclub.cn/problem.php?id=1353" target="_blank" rel="external">1353:素数环</a></h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入正整数n，把正整数1.2.3…..n组成一个环，使得相邻的两个整数之和均为素数，输出时从整数1开始逆时针排列</p>
<p>无法形成素数环的输出“No”。</p>
<p>同一个环应恰输出一次(n&lt;=16).</p>
<h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>正整数n</p>
<h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;iostream&gt;//1353</span></div><div class="line">using namespace std;</div><div class="line">//全局变量</div><div class="line">int n,book[20],a[20]=&#123;0,1&#125;,count;</div><div class="line">//布尔型函数——判断是否为素数</div><div class="line">bool su(int su)&#123;</div><div class="line">	<span class="keyword">for</span>(int i=2;i&lt;su;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(su%i==0)<span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">//以步数作为函数的参数，标记递归步数，且递归步数限定，易于预留出口</div><div class="line">void dfs(int step)&#123;</div><div class="line">	int i;</div><div class="line">	<span class="keyword">for</span>(i=2;i&lt;=n;i++)&#123;</div><div class="line">//book数组用于标记该数字是否已使用过，用于查重，保证每个数字使用一次</div><div class="line">		<span class="keyword">if</span>(book[i]==0)&#123;</div><div class="line">//如果该数未被使用，假定它已被使用，记录，并进行下一层递归</div><div class="line">			book[i]=1;</div><div class="line">			a[step]=i;</div><div class="line">//条件判断，并进行下一层递归</div><div class="line">			<span class="keyword">if</span>(su(a[step]+a[step-1]))dfs(step+1);</div><div class="line">//回溯</div><div class="line">			a[step]=0;</div><div class="line">			book[i]=0;</div><div class="line">		&#125; </div><div class="line">	&#125; </div><div class="line">//出口，判断并输出</div><div class="line">	<span class="keyword">if</span>(step==n+1)&#123;</div><div class="line">		<span class="keyword">if</span>(su(a[n]+a[1]))&#123;</div><div class="line">			<span class="keyword">for</span>(i=1;i&lt;=n;i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">			cout&lt;&lt;endl;</div><div class="line">//count计数</div><div class="line">			count++;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	cin&gt;&gt;n;</div><div class="line">//调用函数，step初始化</div><div class="line">	dfs(2);</div><div class="line">	//<span class="keyword">if</span>(count==0)cout&lt;&lt;<span class="string">"No"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1393-骑士游历"><a href="#1393-骑士游历" class="headerlink" title="1393:骑士游历"></a><a href="http://oj.acmclub.cn/problem.php?id=1393" target="_blank" rel="external">1393:骑士游历</a></h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>设有一个n*m的棋盘（2≤n≤50，2≤m≤50），在棋盘上有一个中国象棋马。<br>规定：<br>1)马只能走日字<br>2)马只能向右跳<br>问给定起点x1,y1和终点x2,y2，求出马从x1,y1出发到x2,y2的合法路径条数。</p>
<h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><p>第一行2个整数n和m<br>第二行4个整数x1,y1,x2,y2</p>
<h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><p>方案数</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">//果断时间超限，但思路确实简单</div><div class="line"><span class="comment">#include&lt;iostream&gt;//1393</span></div><div class="line">using namespace std;</div><div class="line">//全局变量</div><div class="line">int m,n,endx,endy,sum,startx,starty;</div><div class="line">//以递归过程中的主要变量骑士的坐标作为参数</div><div class="line">void dfs(int sx,int sy)&#123;</div><div class="line">//超出地图范围返回</div><div class="line">	<span class="keyword">if</span>(sx&lt;0||sx&gt;n||sy&lt;0||sy&gt;m||sx&gt;endx)<span class="built_in">return</span>;</div><div class="line">//出口</div><div class="line">	<span class="keyword">if</span>(sx==endx&amp;&amp;sy==endy)&#123;</div><div class="line">//记录步数</div><div class="line">		sum++;</div><div class="line">	&#125;</div><div class="line">//对于每种情况不需要提供额外的条件，在可供选择的路径有限时，可以每个列举，而不用明显体现回溯的思想</div><div class="line">//也可以转换成循环</div><div class="line">	dfs(sx+1,sy+2);</div><div class="line">	dfs(sx+2,sy+1);</div><div class="line">	dfs(sx+1,sy-2);</div><div class="line">	dfs(sx+2,sy-1);</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;startx&gt;&gt;starty&gt;&gt;endx&gt;&gt;endy;</div><div class="line">//初始坐标</div><div class="line">	dfs(startx,starty);</div><div class="line">	cout&lt;&lt;sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1287-防御导弹"><a href="#1287-防御导弹" class="headerlink" title="1287: 防御导弹"></a><a href="http://oj.acmclub.cn/problem.php?id=1287" target="_blank" rel="external">1287: 防御导弹</a></h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截 系统有一个缺陷：虽然它的第一发炮弹能够达到任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的导弹来袭。由于该系统还在试 用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。</p>
<h3 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h3><p>最多20个整数，分别表示导弹依次飞来的高度（雷达给出高度数据是不大于30000的正整数）</p>
<h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><p>整数M。表示：这套系统最多能拦截 M 枚导弹.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">//其实这题不太适合用深搜，不过有发现挺多值得注意的点，于是也写进来了</div><div class="line"><span class="comment">#include&lt;iostream&gt;//1287</span></div><div class="line">using namespace std;</div><div class="line">//全局变量</div><div class="line">int count,a[25]=&#123;30000&#125;,s,ma=-999;</div><div class="line">//参数为上一个导弹的高度</div><div class="line">void dfs(int prev)&#123; </div><div class="line">    int i;</div><div class="line">	<span class="keyword">for</span>(i=prev+1;i&lt;=count;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(a[i]&lt;=a[prev])&#123;</div><div class="line">			s++;</div><div class="line">//本次导弹高度座位下一次递归的参数</div><div class="line">			dfs(i);</div><div class="line">//回溯</div><div class="line">			s--;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">//出口——若余下的导弹高度均大于当前，返回	  </div><div class="line">	<span class="keyword">for</span>(i=prev+1;i&lt;=count;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(a[i]&lt;=a[prev])<span class="built_in">break</span>;</div><div class="line">	&#125;</div><div class="line">//用循环判断均不成立，记录拦截导弹数的至多值</div><div class="line">	<span class="keyword">if</span>(i&gt;count)&#123;</div><div class="line">	   <span class="keyword">if</span>(s&gt;ma)ma=s;</div><div class="line">	   <span class="built_in">return</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int n=1;</div><div class="line">//需用文件导入方式结束循环</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;a[n])n++;</div><div class="line">//记录导弹总数</div><div class="line">	count=n-1;</div><div class="line">	dfs(0);</div><div class="line">	cout&lt;&lt;ma;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="深度优先搜索的总结"><a href="#深度优先搜索的总结" class="headerlink" title="深度优先搜索的总结"></a>深度优先搜索的总结</h1><h2 id="深搜基本模型"><a href="#深搜基本模型" class="headerlink" title="深搜基本模型"></a>深搜基本模型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">void dfs(int step)</div><div class="line">&#123;</div><div class="line">判断边界</div><div class="line">尝试每一种可能 <span class="keyword">for</span>(i=1;i&lt;=n;i++)</div><div class="line">&#123;</div><div class="line">继续下一步 dfs(step+1);</div><div class="line">&#125;</div><div class="line">返回</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="深搜总结"><a href="#深搜总结" class="headerlink" title="深搜总结"></a>深搜总结</h2><ul>
<li>判断解题需要用到<strong>不定次循环</strong>;</li>
<li>根据已知条件及题目要求确定<strong>在递归过程的变量</strong>，以此判断函数变量;</li>
<li>考虑出口;</li>
<li>根据题目所需选择数组或变量记录路径或步数;</li>
<li>必要时用<strong>book数组</strong>对路径进行标记;</li>
<li>考虑边界;</li>
<li>确定每一种可能，并保证同级节点条件相同(回溯);</li>
<li>若题目数据量过大，使用深搜容易崩;</li>
<li>可以先通过分析大致画出<strong>树状图</strong>再编程;</li>
<li>注意条件！注意条件！注意条件！</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://extratztty.github.io/2017/04/02/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
