<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Bootstrap入门]]></title>
      <url>https://extratztty.github.io/2017/04/13/Bootstrap%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>Bootstrap，来自 Twitter，基于 HTML、CSS、JAVASCRIPT ，是目前最受欢迎的前端框架。</p>
<p>初略的看了一下内容，觉得很方便，而且通俗易懂（不像react，初看都不知道是用来干嘛的(╯°Д°)╯︵┻━┻），于是打算花点时间学一下。</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>在<a href="http://www.bootcss.com/" target="_blank" rel="external">Bootstrap中文网</a>上下载<a href="http://v3.bootcss.com/getting-started/#download" target="_blank" rel="external">Bootstrap源码</a>（一般情况选第二种——下载源码）。</p>
<p>如果要在一个网页上使用bootstrap框架，若已将源码下载到本地，基本模板如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"zh-CN"</span>&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</div><div class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</div><div class="line">    &lt;title&gt;Bootstrap 101 Template&lt;/title&gt;</div><div class="line">    &lt;link href=<span class="string">"css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;h1&gt;你好，世界！&lt;/h1&gt;</div><div class="line">    &lt;script src=<span class="string">"js/bootstrap.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>通过因特网引用源码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"zh-CN"</span>&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</div><div class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</div><div class="line">    &lt;title&gt;Bootstrap 101 Template&lt;/title&gt;</div><div class="line">      &lt;script src=<span class="string">"https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">      &lt;script src=<span class="string">"https://cdn.bootcss.com/respond.js/1.4.2/respond.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;h1&gt;你好，世界！&lt;/h1&gt;</div><div class="line">    &lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>上述代码效果参见<a href="https://extratztty.github.io/bootstrap/bootstrap.html">https://extratztty.github.io/bootstrap/bootstrap.html</a></p>
<h1 id="栅格类"><a href="#栅格类" class="headerlink" title="栅格类"></a>栅格类</h1><p>Bootstrap 需要为页面内容和栅格系统包裹一个 .container 容器（用于固定宽度并支持响应式布局的容器，也可使用.container-fluid 类用于 100% 宽度）。</p>
<p>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局。  </p>
<p>可以通过对标签指定栅格类名（可指定多个）确定元素在不同屏宽时的宽度及堆叠方式。（当屏宽超过指定栅格类最大值，默认最大宽度对应的栅格类所指定的宽度；当屏宽低于指定栅格类最大值，默认其为12列宽.[嗯，貌似可以这么理解(￣▽￣)~*]）</p>
<p>各预定义的类情况如下</p>
<table style="margin-top: -1450px;"><br>    <thead><br>      <tr><br>        <th></th><br>        <th><br>          超小屏幕<br>          <small>手机 (&lt;768px)</small><br>        </th><br>        <th><br>          小屏幕<br>          <small>平板 (&ge;768px)</small><br>        </th><br>        <th><br>          中等屏幕<br>          <small>桌面显示器 (&ge;992px)</small><br>        </th><br>        <th><br>          大屏幕<br>          <small>大桌面显示器 (&ge;1200px)</small><br>        </th><br>      </tr><br>    </thead><br>    <tbody><br>      <tr><br>        <th class="text-nowrap" scope="row">栅格系统行为</th><br>        <td>总是水平排列</td><br>        <td colspan="3">开始是堆叠在一起的，当大于这些阈值时将变为水平排列C</td><br>      </tr><br>      <tr><br>        <th class="text-nowrap" scope="row"><code>.container</code> 最大宽度</th><br>        <td>None （自动）</td><br>        <td>750px</td><br>        <td>970px</td><br>        <td>1170px</td><br>      </tr><br>      <tr><br>        <th class="text-nowrap" scope="row">类前缀</th><br>        <td><code>.col-xs-</code></td><br>        <td><code>.col-sm-</code></td><br>        <td><code>.col-md-</code></td><br>        <td><code>.col-lg-</code></td><br>      </tr><br>      <tr><br>        <th class="text-nowrap" scope="row">列（column）数</th><br>        <td colspan="4">12</td><br>      </tr><br>      <tr><br>        <th class="text-nowrap" scope="row">最大列（column）宽</th><br>        <td class="text-muted">自动</td><br>        <td>~62px</td><br>        <td>~81px</td><br>        <td>~97px</td><br>      </tr><br>      <tr><br>        <th class="text-nowrap" scope="row">槽（gutter）宽</th><br>        <td colspan="4">30px （每列左右均有 15px）</td><br>      </tr><br>      <tr><br>        <th class="text-nowrap" scope="row">可嵌套</th><br>        <td colspan="4">是</td><br>      </tr><br>      <tr><br>        <th class="text-nowrap" scope="row">偏移（Offsets）</th><br>        <td colspan="4">是</td><br>      </tr><br>      <tr><br>        <th class="text-nowrap" scope="row">列排序</th><br>        <td colspan="4">是</td><br>      </tr><br>    </tbody><br></table>

<p>如果在一个 .row 内包含的列（column）大于12个，包含多余列（column）的元素将作为一个整体单元被另起一行排列。</p>
<p>使用 .col-md-offset-* 类可以将列向右侧偏移。</p>
<p>通过使用 .col-md-push-<em> 和 .col-md-pull-</em> 类就可以很容易的改变列（column）的顺序。</p>
<p>可以通过添加一个新的 .row 元素和一系列 .col-sm-<em> 元素到已经存在的 .col-sm-</em> 元素内。被嵌套的行（row）所包含的列（column）的个数不能超过12。</p>
<p>另外还有一些响应式工具参见<a href="http://v3.bootcss.com/css/#responsive-utilities" target="_blank" rel="external">http://v3.bootcss.com/css/#responsive-utilities</a></p>
<h1 id="Bootstrap中的一些标签和相关的类"><a href="#Bootstrap中的一些标签和相关的类" class="headerlink" title="Bootstrap中的一些标签和相关的类"></a>Bootstrap中的一些标签和相关的类</h1><p><strong> 一些效果同相应标签的预定义类：</strong><br>.h1 - .h6<br>.small<br>.text-[left|center|right|justify|nowrap]<br>.text-[lowercase|uppercase|capitalize]<br>.table</p>
<p><strong> 一些有趣的预定义类：</strong><br>.lead（让段落突出显示）<br>.initialism（为缩略语添加，减小font-size）<br>.blockquote-reverse（引用呈现内容右对齐）</p>
<p>.list-unstyled（无样式列表）<br>.list-inline（内联列表）</p>
<p>.dl-horizontal（水平排列的描述）</p>
<p>.table-striped （给 &lt;tbody&gt; 之内的每一行增加斑马条纹样式）<br>.table-bordered （为表格和其中的每个单元格增加边框）<br>.table-hover （让&lt;tbody&gt; 中的每一行对鼠标悬停状态作出响应）<br>.table-condensed （让表格更加紧凑，单元格中的内补（padding）均会减半）</p>
<p>.active（鼠标悬停在行或单元格上时所设置的颜色）<br>.success（标识成功或积极的动作）<br>.info（标识普通的提示信息或动作）<br>.warning（标识警告或需要用户注意）<br>.danger（标识危险或潜在的带来负面影响的动作）</p>
<p>.table-responsive（.table 元素包裹在 .table-responsive 元素内，即可创建响应式表格）</p>
<p>.form-control（使一些表单控件默认设置宽度属性为 width: 100%）<br>.form-group（使label 元素和一些表单控件获得最好的排列）<br>.form-inline（可使form元素内容左对齐并且表现为 inline-block 级别的控件[视口至少在768px宽度]）<br>.form-horizontal（联合使用 Bootstrap 预置的栅格类，可以将 label 标签和控件组水平并排布局）</p>
<p>.checkbox-inline（内联多选框）<br>.radio-inline（内联单选框）<br>.form-control-static（表单中将一行纯文本和 label 元素放置于同一行）<br>.sr-only（隐藏表单控件的 &lt;label&gt;）<br>.input-[lg|sm]（为控件设置高度）<br>.form-group-[lg|sm]（为 .form-horizontal 包裹的 label 元素和表单控件快速设置尺寸）</p>
<p>.btn btn-[default(默认样式)|primary(首选项)|success(成功)|info(一般信息)|warning(警告)|danger(危险)|link(链接)]（按钮样式）<br>.btn-[lg|sm|xs]（获得不同尺寸的按钮）<br>.btn-block（将按钮拉伸至父元素100%的宽度，并变成块级（block）元素）</p>
<p>.active（激活状态）<br>.disabled（禁用状态）</p>
<p>.img-responsive（让图片支持响应式布局）<br>.center-block（让使用了 .img-responsive 类的图片水平居中）<br>.img-[rounded|circle|thumbnail]（让图片呈现不同的形状）<br>.text-[muted|primary|success|info|warning|danger]（情境文本颜色）<br>.bg-[primary|success|info|warning|danger]（情境背景色）</p>
<p>.close（关闭按钮）<br>.caret（三角符号）<br>.pull-[left|right]（快速浮动）<br>.center-block（让内容块居中）<br>.clearfix（清除浮动）<br>.show（显示）<br>.hidden（隐藏）<br>.invisible（仅仅影响元素的可见性）<br>.sr-only（对屏幕阅读器以外的设备隐藏内容）<br>.text-hide（将元素的文本内容替换为一张背景图）</p>
<p><strong> 一些可能是新的标签：</strong><br><mark>&lt;mark&gt;（需要突出的文本）</mark><br><del>&lt;del&gt;（被删除的文本）</del><br><s>&lt;s&gt;（没用的文本）</s><br><ins>&lt;ins&gt;（额外插入的文本）</ins><br><u>&lt;u&gt;（为文本添加下划线）</u><br><em>&lt;em&gt;（斜体）</em><br><abbr title="完整内容">&lt;abbr&gt;（缩略语）</abbr></p>
<p><blockquote>&lt;blockquote&gt;（引用）</blockquote><br><cite>&lt;cite&gt;（引用来源）</cite><br><kbd>&lt;kbd&gt;（标记用户通过键盘输入的内容）</kbd></p>
<p><pre>&lt;pre&gt;（多行代码）</pre><br><var>&lt;var&gt;（标记变量）</var><br><samp>&lt;samp&gt;（标记程序输出的内容）</samp></p>
<h1 id="postscript"><a href="#postscript" class="headerlink" title="postscript"></a>postscript</h1><ol>
<li><p>在 HTML5 中可以放心使用 &lt;b&gt; 和 &lt;i&gt; 标签。&lt;b&gt; 用于高亮单词或短语，不带有任何着重的意味；而 &lt;i&gt; 标签主要用于发言、技术词汇等。</p>
</li>
<li><p>不要将表单组直接和输入框组混合使用。建议将输入框组嵌套到表单组中使用。</p>
</li>
<li><p>如果你没有为每个输入控件设置 label 标签，屏幕阅读器将无法正确识别。对于这些内联表单，你可以通过为 label 设置 .sr-only 类将其隐藏。</p>
</li>
<li><p>支持多行文本的表单控件。可根据需要改变 rows 属性。</p>
</li>
<li><p>对于标记了 multiple 属性的 &lt;select&gt; 控件来说，默认显示多选项。</p>
</li>
<li><p>为输入框设置 disabled 属性可以禁止其与用户有任何交互（焦点、输入等）。被禁用的输入框颜色更浅，并且还添加了 not-allowed 鼠标状态。</p>
</li>
<li><p>为 &lt;button&gt; 元素添加 disabled 属性，使其表现出禁用状态。</p>
</li>
<li><p>为输入框设置 readonly 属性可以禁止用户修改输入框中的内容</p>
</li>
<li><p>Bootstrap 对表单控件的校验状态，都定义了样式。使用时，添加 .has-warning、.has-error 或 .has-success 类到这些控件的父元素。任何包含在此元素之内的 .control-label、.form-control 和 .help-block 元素都将接受这些校验状态的样式。</p>
</li>
<li><p>你还可以针对校验状态为输入框添加额外的图标。只需设置相应的 .has-feedback 类并添加正确的图标即可。反馈图标（feedback icon）只能使用在文本输入框 &lt;input class=”form-control”&gt; 元素上。</p>
</li>
<li><p>按钮类可以应用到 &lt;a&gt; 和 &lt;button&gt; 元素上，但是，导航和导航条组件只支持 &lt;button&gt; 元素。<br>如果 &lt;a&gt; 元素被作为按钮使用 – 并用于在当前页面触发某些功能 – 而不是用于链接其他页面或链接当前页面中的其他部分，那么，务必为其设置 role=”button” 属性。</p>
</li>
<li><p>快速浮动不能用于导航条组件中。排列导航条中的组件时可以使用这些工具类：.navbar-left 或 .navbar-right 。 参见导航条文档以获取更多信息。</p>
</li>
<li><p>!important 来避免 CSS 样式优先级问题</p>
</li>
</ol>
<p><strong> <a href="http://v3.bootcss.com/css/#less-bootstrap" target="_blank" rel="external">编译 Bootstrap</a> </strong></p>
<p><strong> <a href="http://v3.bootcss.com/css/#less-mixins-utility" target="_blank" rel="external">实用工具 mixin</a> </strong></p>
<p><strong> <a href="http://v3.bootcss.com/components/" target="_blank" rel="external">组件</a> </strong></p>
<p><strong> <a href="http://v3.bootcss.com/javascript/" target="_blank" rel="external">JavaScript 插件</a> </strong></p>
<p><strong> <a href="http://mb.bootcss.com/" target="_blank" rel="external">Bootstrap开源模版</a> </strong></p>
<p>就先入个门哈~</p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[图的遍历]]></title>
      <url>https://extratztty.github.io/2017/04/04/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      <content type="html"><![CDATA[<p>图的遍历分为深度优先遍历和广度优先遍历。</p>
<h1 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h1><p>深度优先遍历的主要思想就是：首先以一个未被访问过的顶点作为起始顶点，沿当前顶点的边走到未访问过的顶点；当没有未访问过的顶点时，则回到上一个顶点，继续试探访问别的顶点，直到所有的顶点都被访问过。显然，深度优先遍历是沿着图的某一条分支遍历直到末端，然后回溯，再沿着另一条进行同样的遍历，直到所有的顶点都被访问过为止。</p>
<p>广度优先遍历的主要思想就是：首先以一个未被访问过的顶点作为起始顶点，访问其所有相邻的顶点，然后对每个相邻的顶点，再访问它们相邻的未被访问过的顶点，直到所有顶点都被访问过，遍历结束。</p>
<p>以上摘自<a href="https://book.douban.com/subject/25894685/" target="_blank" rel="external">《啊哈！算法》</a></p>
<p>看起来貌似就是深度优先搜索和广度优先搜索，不过实现图的遍历除了需要用深度优先搜索和广度优先搜索的思想方法外，还需要额外解决如何存储一个图的问题。</p>
<h1 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h1><p>主要方法是通过把题目所给条件转化成二维数组进行存储。</p>
<p>举例来讲</p>
<p>给出如下数据</p>
<p>5 8</p>
<p>1 2 2 </p>
<p>1 5 10</p>
<p>2 3 3 </p>
<p>2 5 7 </p>
<p>3 1 4 </p>
<p>3 4 4 </p>
<p>4 5 5</p>
<p>5 3 3</p>
<p>转换成图如下</p>
<p><img width="200px" src="/img/啊哈！算法image97.jpg"></p>
<p>将每条线路的起始位置对映成数组的坐标（对应起始位置无线路表示成 ∞）</p>
<p><img width="200px" src="/img/啊哈！算法image98.jpg"></p>
<p>其中将 ∞ 以一个足够大数字代替，即可通过一个整形数组存储所有线路情况。</p>
<h1 id="遍历图的实现"><a href="#遍历图的实现" class="headerlink" title="遍历图的实现"></a>遍历图的实现</h1><p>以二维数组为例通过深度优先搜索实现遍历</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//初始化</div><div class="line">int book[101],a[101][101];</div><div class="line">//cur表示当前位置</div><div class="line">void dfs(int cur)</div><div class="line">&#123;</div><div class="line">	出口</div><div class="line">//尝试当前位置到各个位置的路径</div><div class="line">	<span class="keyword">for</span>(j=1;j&lt;=n;j++)&#123;</div><div class="line">//判断当前位置到各个位置的路径，99999表示 ∞ </div><div class="line">		<span class="keyword">if</span>(a[cur][j] != 99999 &amp;&amp; book[j]==0)&#123;</div><div class="line">			book[j]=1;//标记已经过该位置</div><div class="line">			dfs(j);//以当前位置为起点探索下一个目标</div><div class="line">			book[j]=0;//回溯	</div><div class="line">       		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[随便扯扯广度优先搜索]]></title>
      <url>https://extratztty.github.io/2017/04/04/%E9%9A%8F%E4%BE%BF%E6%89%AF%E6%89%AF%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
      <content type="html"><![CDATA[<p>其实上个学期若不是必要我一般不用函数来解决算法问题，或者说，我比较习惯在main函数里完成所有算法过程。</p>
<p>但在接触到广度优先搜索之前，我已经就深搜做了一定的练习，需要学习总结的还有很多，且时间有限，只能对广搜进行纸上谈兵式的总结。</p>
<h1 id="关于广度优先搜索"><a href="#关于广度优先搜索" class="headerlink" title="关于广度优先搜索"></a>关于广度优先搜索</h1><p>宽度优先搜索算法（又称广度优先搜索）是最简便的图的搜索算法之一，这一算法也是很多重要的图的算法的原型。</p>
<p>感觉广度优先搜索和深度优先搜索在一定程度上可以说等效，虽说在不同情况下也各有优势，但通过设置一些变量或数组很多时候都能达到类似的效果。</p>
<p>总结广度优先搜索，就是把树结构的每一级节点一级一级向下的存储在一个随之不断更新的队列数组中，更偏向于横向的发展，所以如果是题目需要记录步数或路径的情况，处理起来会有些不方便，相反，如果是要输出某一阶段的所有情况，广搜会比较有利。</p>
<h1 id="广度优先搜索总结"><a href="#广度优先搜索总结" class="headerlink" title="广度优先搜索总结"></a>广度优先搜索总结</h1><h2 id="广搜基本模型总结"><a href="#广搜基本模型总结" class="headerlink" title="广搜基本模型总结"></a>广搜基本模型总结</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">struct note </div><div class="line">&#123;</div><div class="line">	变量</div><div class="line">	(int father)//记录父节点编号，用于输出路径</div><div class="line">	(int step)//记录步数</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int head=1,tail=1;</div><div class="line">	初始化</div><div class="line">	tail++;</div><div class="line">	<span class="keyword">while</span>(head&lt;tail)</div><div class="line">	&#123;</div><div class="line">		枚举各种情况</div><div class="line">		计算下一个节点</div><div class="line">		判断&#123;</div><div class="line">			插入新节点</div><div class="line">			tail++;</div><div class="line">		&#125;</div><div class="line">		出口</div><div class="line">		head++;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="广搜关键点总结"><a href="#广搜关键点总结" class="headerlink" title="广搜关键点总结"></a>广搜关键点总结</h2><ul>
<li>判断解题需要用到不定次循环;</li>
<li>根据已知条件及题目要求确定变量;</li>
<li>注意head,tail位置;</li>
<li>考虑出口;</li>
<li>根据题目所需选择数组或变量记录路径或步数;</li>
<li>用book数组对路径进行标记;</li>
<li>考虑边界;</li>
<li>可以先通过分析大致画出树状图再编程;</li>
<li>注意条件！注意条件！注意条件！</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[markdown基本语法总结]]></title>
      <url>https://extratztty.github.io/2017/04/04/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="标题设置"><a href="#标题设置" class="headerlink" title="标题设置"></a>标题设置</h1><p>在markdown当中设置标题，有两种方式：</p>
<ol>
<li><p>通过在文字下方添加“=”和“-“,他们分别表示一级标题和二级标题。</p>
</li>
<li><p>在文字开头加上“#”，通过“#”数量表示几级标题。（一共6级标题）</p>
</li>
</ol>
<h1 id="块注释"><a href="#块注释" class="headerlink" title="块注释"></a>块注释</h1><p>通过在文字开头添加“&gt;”表示块注释。</p>
<blockquote>
<p>当&gt;和文字之间添加五个blank时,注释块会变化。</p>
</blockquote>
<h1 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h1><p>将需要设置为<em>斜体</em>的文字两端使用一个“*”或“_”夹起来</p>
<h1 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h1><p>将需要设置为<strong>粗体</strong>的文字两端使用两个“**”或“_”夹起来</p>
<h1 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h1><ul>
<li><p>在文字开头添加（*，+，-）实现无序列表（注意添加空格）</p>
</li>
<li><p>建议: 一个文档只是用一种无序列表的表示方式。</p>
</li>
</ul>
<h1 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h1><ol>
<li>使用数字后面跟上句号（注意添加空格）</li>
</ol>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="内联方式"><a href="#内联方式" class="headerlink" title="内联方式"></a>内联方式</h2><p>Hi , welcome to [extratztty’s domain] (<a href="https://extratztty.github.io">https://extratztty.github.io</a>)</p>
<h2 id="引用方式"><a href="#引用方式" class="headerlink" title="引用方式"></a>引用方式</h2><p>I get 10 times more traffic from [Google][1] than from [Yahoo][2] or [MSN][3]. </p> 

<p><span>[1]: <a href="http://google.com/" target="_blank" rel="external">http://google.com/</a></span><br><span>[2]: <a href="http://search.yahoo.com/" target="_blank" rel="external">http://search.yahoo.com/</a></span><br><span>[3]: <a href="http://search.msn.com/" target="_blank" rel="external">http://search.msn.com/</a></span></p>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>图片的处理方式类似链接的处理方式</p>
<h2 id="内联方式-1"><a href="#内联方式-1" class="headerlink" title="内联方式"></a>内联方式</h2><p>![alt text] (/img/avatar.png “Title”)</p>
<h2 id="引用方式-1"><a href="#引用方式-1" class="headerlink" title="引用方式"></a>引用方式</h2><p>![alt text][id]</p>

<p><span>[id]: /img/avatar.png”Title”</span></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>实现方式有两种：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">简单文字出现一个代码框。使用`&lt;blockquote&gt;`。（`不是单引号而是左上角的ESC下面~中的`）</div><div class="line">大片文字需要实现代码框。使用Tab和四个空格。</div></pre></td></tr></table></figure>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><p>hello[^hello]</p>


<p><span>[^hello]: hi</span></p>
<h1 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h1><p>在空白行下方添加三条“-”横线。</p>
<hr>
<h1 id="postscript"><a href="#postscript" class="headerlink" title="postscript"></a>postscript</h1><p>在 HTML 区块标签间的 Markdown 格式语法将不会被处理</p>
<p>HTML 的区段（行内）标签可以在 Markdown 的段落、列表或是标题里随意使用。</p>
<p>依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。</p>
]]></content>
      
        
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一些关于深度优先搜索的总结]]></title>
      <url>https://extratztty.github.io/2017/04/03/%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8E%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>过几天就是蓝桥杯了，虽然lowbee一个，但毕竟交了钱的，有必要做些准备。                 </p>
<p>其实上个学期前都没怎么用递归，更不用说深搜，初次接触还是在寒假蓝桥杯培训的时候，但当时只留了个概念，到最近才开始正式的开始一些思考总结。</p>
<h1 id="关于深度优先搜索"><a href="#关于深度优先搜索" class="headerlink" title="关于深度优先搜索"></a>关于深度优先搜索</h1><p>深度优先搜索（Depth-First-Search）是搜索算法的一种。是沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所有边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。属于盲目搜索。</p>
<p>以上是搜狗百科的总结。</p>
<p>总的来说我认为这就是一种没什么想法的时候，不考虑各种复杂度时可以用，且应用范围还是挺广的一种算法（一般是用来解迷宫一类的图形题的吧）。</p>
<p>大部分我用循环解不出来的题，用深搜思路倒是很容易理顺，虽说经常出BUG，或是时间超限什么的。</p>
<p>最近找了几道题练习一下深搜，虽然都不是最优的解法，有的都AC 不了，但就对深搜的总结而言还是很有帮助的。</p>
<h2 id="1326-排列组合"><a href="#1326-排列组合" class="headerlink" title="1326:排列组合"></a><a href="http://oj.acmclub.cn/problem.php?id=1326" target="_blank" rel="external">1326:排列组合</a></h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>从1-n几个数字中选出m个数字组合，输出所有组合方式</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>输入n和 m，中间用空格隔开</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出所有组合方式，每行一个，每个数字用空格隔开</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;iostream&gt;//1326</span></div><div class="line">using namespace std;</div><div class="line">//全局变量</div><div class="line">int n,m,a[100];</div><div class="line">//以步数作为函数的参数，标记递归步数，且递归步数限定，易于预留出口</div><div class="line">void dfs(int step)&#123;</div><div class="line">	int i;</div><div class="line">//出口——预留出口结束递归</div><div class="line">	<span class="keyword">if</span>(step==m+1)&#123;</div><div class="line">	<span class="keyword">for</span>(i=1;i&lt;=m-1;i++)&#123;</div><div class="line">			cout&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">		&#125;</div><div class="line">		cout&lt;&lt;a[m]&lt;&lt;endl;</div><div class="line">	 	<span class="built_in">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(i=a[step-1]+1;i&lt;=n;i++)&#123;</div><div class="line">		a[step]=i;</div><div class="line">//递归——记录下一步递归</div><div class="line">		dfs(step+1);</div><div class="line">//回溯——通过回溯保证同级的节点以相似的状态进行下一步递归</div><div class="line">		a[step]=0;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span>;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	cin&gt;&gt;n&gt;&gt;m;</div><div class="line">//调用函数，step初始化</div><div class="line">	dfs(1);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h2 id="1353-素数环"><a href="#1353-素数环" class="headerlink" title="1353:素数环"></a><a href="http://oj.acmclub.cn/problem.php?id=1353" target="_blank" rel="external">1353:素数环</a></h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入正整数n，把正整数1.2.3…..n组成一个环，使得相邻的两个整数之和均为素数，输出时从整数1开始逆时针排列</p>
<p>无法形成素数环的输出“No”。</p>
<p>同一个环应恰输出一次(n&lt;=16).</p>
<h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>正整数n</p>
<h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;iostream&gt;//1353</span></div><div class="line">using namespace std;</div><div class="line">//全局变量</div><div class="line">int n,book[20],a[20]=&#123;0,1&#125;,count;</div><div class="line">//布尔型函数——判断是否为素数</div><div class="line">bool su(int su)&#123;</div><div class="line">	<span class="keyword">for</span>(int i=2;i&lt;su;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(su%i==0)<span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">//以步数作为函数的参数，标记递归步数，且递归步数限定，易于预留出口</div><div class="line">void dfs(int step)&#123;</div><div class="line">	int i;</div><div class="line">	//出口，判断并输出</div><div class="line">	<span class="keyword">if</span>(step==n+1)&#123;</div><div class="line">		<span class="keyword">if</span>(su(a[n]+a[1]))&#123;</div><div class="line">			<span class="keyword">for</span>(i=1;i&lt;=n;i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">			cout&lt;&lt;endl;</div><div class="line">//count计数</div><div class="line">			count++;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(i=2;i&lt;=n;i++)&#123;</div><div class="line">//book数组用于标记该数字是否已使用过，用于查重，保证每个数字使用一次</div><div class="line">		<span class="keyword">if</span>(book[i]==0)&#123;</div><div class="line">//如果该数未被使用，假定它已被使用，记录，并进行下一层递归</div><div class="line">			book[i]=1;</div><div class="line">			a[step]=i;</div><div class="line">//条件判断，并进行下一层递归</div><div class="line">			<span class="keyword">if</span>(su(a[step]+a[step-1]))dfs(step+1);</div><div class="line">//回溯</div><div class="line">			a[step]=0;</div><div class="line">			book[i]=0;</div><div class="line">		&#125; </div><div class="line">	&#125; </div><div class="line">    <span class="built_in">return</span>;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	cin&gt;&gt;n;</div><div class="line">//调用函数，step初始化</div><div class="line">	dfs(2);</div><div class="line">	//<span class="keyword">if</span>(count==0)cout&lt;&lt;<span class="string">"No"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1393-骑士游历"><a href="#1393-骑士游历" class="headerlink" title="1393:骑士游历"></a><a href="http://oj.acmclub.cn/problem.php?id=1393" target="_blank" rel="external">1393:骑士游历</a></h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>设有一个n*m的棋盘（2≤n≤50，2≤m≤50），在棋盘上有一个中国象棋马。<br>规定：<br>1)马只能走日字<br>2)马只能向右跳<br>问给定起点x1,y1和终点x2,y2，求出马从x1,y1出发到x2,y2的合法路径条数。</p>
<h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><p>第一行2个整数n和m<br>第二行4个整数x1,y1,x2,y2</p>
<h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><p>方案数</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">//果断时间超限，但思路确实简单</div><div class="line"><span class="comment">#include&lt;iostream&gt;//1393</span></div><div class="line">using namespace std;</div><div class="line">//全局变量</div><div class="line">int m,n,endx,endy,sum,startx,starty;</div><div class="line">//以递归过程中的主要变量骑士的坐标作为参数</div><div class="line">void dfs(int sx,int sy)&#123;</div><div class="line">//超出地图范围返回</div><div class="line">	<span class="keyword">if</span>(sx&lt;0||sx&gt;n||sy&lt;0||sy&gt;m||sx&gt;endx)<span class="built_in">return</span>;</div><div class="line">//出口</div><div class="line">	<span class="keyword">if</span>(sx==endx&amp;&amp;sy==endy)&#123;</div><div class="line">//记录步数</div><div class="line">		sum++;</div><div class="line">	&#125;</div><div class="line">//对于每种情况不需要提供额外的条件，在可供选择的路径有限时，可以每个列举，而不用明显体现回溯的思想</div><div class="line">//也可以转换成循环</div><div class="line">	dfs(sx+1,sy+2);</div><div class="line">	dfs(sx+2,sy+1);</div><div class="line">	dfs(sx+1,sy-2);</div><div class="line">	dfs(sx+2,sy-1);</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;startx&gt;&gt;starty&gt;&gt;endx&gt;&gt;endy;</div><div class="line">//初始坐标</div><div class="line">	dfs(startx,starty);</div><div class="line">	cout&lt;&lt;sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1287-防御导弹"><a href="#1287-防御导弹" class="headerlink" title="1287: 防御导弹"></a><a href="http://oj.acmclub.cn/problem.php?id=1287" target="_blank" rel="external">1287: 防御导弹</a></h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截 系统有一个缺陷：虽然它的第一发炮弹能够达到任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的导弹来袭。由于该系统还在试 用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。</p>
<h3 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h3><p>最多20个整数，分别表示导弹依次飞来的高度（雷达给出高度数据是不大于30000的正整数）</p>
<h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><p>整数M。表示：这套系统最多能拦截 M 枚导弹.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">//其实这题不太适合用深搜，不过有发现挺多值得注意的点，于是也写进来了</div><div class="line"><span class="comment">#include&lt;iostream&gt;//1287</span></div><div class="line">using namespace std;</div><div class="line">//全局变量</div><div class="line">int count,a[25]=&#123;30000&#125;,s,ma=-999;</div><div class="line">//参数为上一个导弹的高度</div><div class="line">void dfs(int prev)&#123; </div><div class="line">    int i;//出口——若余下的导弹高度均大于当前，返回	  </div><div class="line">	<span class="keyword">for</span>(i=prev+1;i&lt;=count;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(a[i]&lt;=a[prev])<span class="built_in">break</span>;</div><div class="line">	&#125;</div><div class="line">//用循环判断均不成立，记录拦截导弹数的至多值</div><div class="line">	<span class="keyword">if</span>(i&gt;count)&#123;</div><div class="line">	   <span class="keyword">if</span>(s&gt;ma)ma=s;</div><div class="line">	   <span class="built_in">return</span>;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">	<span class="keyword">for</span>(i=prev+1;i&lt;=count;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(a[i]&lt;=a[prev])&#123;</div><div class="line">			s++;</div><div class="line">//本次导弹高度座位下一次递归的参数</div><div class="line">			dfs(i);</div><div class="line">//回溯</div><div class="line">			s--;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">    <span class="built_in">return</span>;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int n=1;</div><div class="line">//需用文件导入方式结束循环</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;a[n])n++;</div><div class="line">//记录导弹总数</div><div class="line">	count=n-1;</div><div class="line">	dfs(0);</div><div class="line">	cout&lt;&lt;ma;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="深度优先搜索的总结"><a href="#深度优先搜索的总结" class="headerlink" title="深度优先搜索的总结"></a>深度优先搜索的总结</h1><h2 id="深搜基本模型总结"><a href="#深搜基本模型总结" class="headerlink" title="深搜基本模型总结"></a>深搜基本模型总结</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">void dfs(int step)</div><div class="line">&#123;</div><div class="line">	判断边界</div><div class="line">	尝试每一种可能 <span class="keyword">for</span>(i=1;i&lt;=n;i++)</div><div class="line">	&#123;</div><div class="line">		继续下一步 dfs(step+1);</div><div class="line">	&#125;</div><div class="line"> 	返回</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="深搜关键点总结"><a href="#深搜关键点总结" class="headerlink" title="深搜关键点总结"></a>深搜关键点总结</h2><ul>
<li>判断解题需要用到<strong>不定次循环</strong>;</li>
<li>根据已知条件及题目要求确定<strong>在递归过程的变量</strong>，以此判断函数变量;</li>
<li>考虑出口;</li>
<li>根据题目所需选择数组或变量记录路径或步数;</li>
<li>必要时用<strong>book数组</strong>对路径进行标记;</li>
<li>考虑边界;</li>
<li>确定每一种可能，并保证同级节点条件相同(回溯);</li>
<li>若题目数据量过大，使用深搜容易崩;</li>
<li>可以先通过分析大致画出<strong>树状图</strong>再编程;</li>
<li>注意条件！注意条件！注意条件！</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://extratztty.github.io/2017/04/02/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
